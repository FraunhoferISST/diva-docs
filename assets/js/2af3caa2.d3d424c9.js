"use strict";(self.webpackChunkdiva_docs=self.webpackChunkdiva_docs||[]).push([[1903],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(a),m=r,u=h["".concat(l,".").concat(m)]||h[m]||d[m]||i;return a?n.createElement(u,o(o({ref:t},p),{},{components:a})):n.createElement(u,o({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},3615:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),o=["components"],s={id:"introduction",title:"Overview"},l="Overview",c={unversionedId:"Development/Architecture/introduction",id:"Development/Architecture/introduction",title:"Overview",description:"The following figure will give you a quick overview on the architecture of DIVA.",source:"@site/docs/04-Development/04-Architecture/01-introduction.md",sourceDirName:"04-Development/04-Architecture",slug:"/Development/Architecture/introduction",permalink:"/docs/Development/Architecture/introduction",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"introduction",title:"Overview"},sidebar:"divaSidebar",previous:{title:"Docker Deployment",permalink:"/docs/Development/Development/docker-deployment"},next:{title:"Schemata",permalink:"/docs/Development/Architecture/json-schemas"}},p={},d=[{value:"Data Model",id:"data-model",level:2},{value:"DCAT Compatibility",id:"dcat-compatibility",level:3},{value:"DIVA Core",id:"diva-core",level:2}],h={toc:d};function m(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"overview"},"Overview"),(0,i.kt)("p",null,"The following figure will give you a quick overview on the architecture of DIVA.\nIn the following chapter we will take a close look at main components and explain their responsibilities.\nFollowing the navigation structure in the left sidebar you will consistently learn the architecture and be able to understand the implications and design decisions."),(0,i.kt)("p",null,"Diva architecture follows the Micro Services pattern and aims at high degree of scalability.\nThe main goal is to provide the most simplistic components and strong modularity for scalable extension of the system with new functionalities."),(0,i.kt)("p",null,"We have five types of services, which are distinguished from each other by well-defined competences.\nAt one hand, we have management services. Management Services are derived from our data model and perform the operations on the corresponding entities.\nOn the other hand, there are Assistant Services, which are responsible for additional useful functions.\nTo be able to connect DIVA with external sources like UrbanPulse or DSC, we develop the third service type - Adapter Services.\nConnector Services are used to internally replicate metadata from primary MongoDB data store to other data stores."),(0,i.kt)("p",null,"All services provide an API which is strictly defined using OpenAPI specification.\nThe web client uses API Gateway to access the backend, API Gateway acts as an abstraction layer for the underlying services.\nKafka messages allow services to communicate indirectly and asynchronously with each other."),(0,i.kt)("p",null,"In the following the components will be explained with more details."),(0,i.kt)("h2",{id:"data-model"},"Data Model"),(0,i.kt)("p",null,"Our data model aims at simplicity and flat hierarchy.\nWe have designed a model with loose entity coupling, driven by ",(0,i.kt)("a",{parentName:"p",href:"json-schemas"},"JSON schemas"),".\nJSON schemas are most important building block of our whole system.\nThanks to the schema-driven development process, we can achieve high integrity and validity of the data processed in DIVA.\nFurthermore, this approach allows us to develop Management Services API's with fully automated data validation process."),(0,i.kt)("p",null,"We have two levels of hierarchy in our model, with the Entity on top.\nEntity is a logical high level abstraction that represents common properties of the underlying entities and does ",(0,i.kt)("strong",{parentName:"p"},"not")," exists physically.\nThe entities ",(0,i.kt)("a",{parentName:"p",href:"../../../about#user"},"User"),", ",(0,i.kt)("a",{parentName:"p",href:"../../../about#resource"},"Resource"),", ",(0,i.kt)("a",{parentName:"p",href:"../../../about#asset"},"Asset")," etc. inherit properties like ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"entityType")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"created")," from Entity.\nYou will find schemas for all entities in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/FraunhoferISST/diva/tree/master/core/schemata"},(0,i.kt)("inlineCode",{parentName:"a"},"core/schemata/"))," directory."),(0,i.kt)("p",null,"Although the entities are not coupled with each other, they can have relations.\nAll entities are created by an actor (User or Service).\nAn Asset can group multiple Resources, Asset and Resources can have multiple Reviews and History entries.\nThe relation is expressed through linking via the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," attribute.\nSo if one entity is in relation to another, it must store the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," of the corresponding entity.\nFor example, if a User with the id ",(0,i.kt)("inlineCode",{parentName:"p"},"user:uuid:041587a4-f9fb-4c6a-8ff0-6ff93c374c3f")," want to create a Review for a Resource with the id ",(0,i.kt)("inlineCode",{parentName:"p"},"resource:uuid:c98bdd99-c68b-47d0-85f5-2b362cf74e14"),", the representations of the Review will look like follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n  id: "review:uuid:some-id",\n  belongsTo: "resource:uuid:c98bdd99-c68b-47d0-85f5-2b362cf74e14", // points to Resource\n  creatorId: "user:uuid:041587a4-f9fb-4c6a-8ff0-6ff93c374c3f", // points to User\n  ...\n}\n')),(0,i.kt)("p",null,"In this way we can achieve a flat hierarchy, loose coupling and flexible relations between entities.\nThis in turn allows us to develop services with transparent API according to the single responsibility principle.\nYou will learn more about our ",(0,i.kt)("a",{parentName:"p",href:"rest-api"},"REST API")," design rules in the corresponding section."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Relations")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Note that even if the entities have relations, they remain fully independent and can be managed only by the corresponding management service.\nThe existence of one entity is not bound to another one!"))),(0,i.kt)("h3",{id:"dcat-compatibility"},"DCAT Compatibility"),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"DCAT 3")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"In this case, ",(0,i.kt)("strong",{parentName:"p"},"compatible")," means that a parser (that currently does not exist) can transform our internal metadata model into DCAT 3.\nIt may be that DCAT allows a higher cardinality than the metadata model in DIVA.\nNevertheless, DIVA would be compatible at this point.\nThe reverse case may also occur. However, then we would not have compatibility."))),(0,i.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"TBD")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Currently we do not have a complete overview of which fields are DCAT compatible.\nThis is still to be done."))),(0,i.kt)("h2",{id:"diva-core"},"DIVA Core"),(0,i.kt)("p",null,"Under the DIVA Core we understand all components that are implemented and packaged by us or are necessary for the basic\nfunctionality. This includes, for example, management services that we have written or external open source products such\nas MongoDB or Kafka, which are fixed parts of the DIVA ecosystem."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Web client")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"web-client"},"Web application")," is currently the only client that allows managing DIVA Catalog through a nice UI.\nFor non-developers this is the only way to interact with the system's backend. Make sure to take a look at the\n",(0,i.kt)("a",{parentName:"p",href:"../../user-docs/introduction"},"users guide"),"!"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"API Gateway")),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"gateway"},"Kong API Gateway")," acts as a secure access point to the backend services. It is an abstraction layer\nfor the REST API's of the individual services used by our ",(0,i.kt)("a",{parentName:"p",href:"web-client"},"Web client"),". Only authenticated users with\na valid JWT have access to the backend through the API Gateway."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Schema registry")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/FraunhoferISST/diva/tree/master/core/services/schema-registry"},"Schema Registry"),"\nholds and exposes all schemas through the API endpoint, including ",(0,i.kt)("a",{parentName:"p",href:"json-schemas"},"JSON Schemas")," and\nAsyncAPI Schemas. All interested services contact the Schema Registry and load the required schemas once at start time. "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Messaging")),(0,i.kt)("p",null,"We use Kafka as the event bus for the asynchronous communications between the components. The messages structure is regulated\nthrough the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/FraunhoferISST/diva/tree/master/core/schemata/asyncapi/asyncapi.yml"},"AsyncAPI schema"),". The management Service\nproduces events indicating data changes on corresponding topics. To guaranty consistency and integrity of the exchanged data,\nthe services validate the messages against AsyncAPI schema while consuming and producing them. "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Data Storage")),(0,i.kt)("p",null,"DIVA uses three databases as persistent data store, including MongoDB, Elasticsearch and MinIO. MongoDB is the primary\nmetadata storage for all kind of DIVA entities (users, resources, assets etc.) and is always the ",(0,i.kt)("strong",{parentName:"p"},"source of truth"),".\nMongoDB instance should be used to reach consistency across other external or internal components. "),(0,i.kt)("p",null,"Relevant entities' metadata is replicated\nto the Elasticsearch instance through the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/FraunhoferISST/diva/tree/master/core/services/elasticsearch-connector"},"Elasticsearch Connector"),"\nto provide high performance full text search capabilities.\nThis ES instance is used by the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/FraunhoferISST/diva/tree/master/core/services/search-assistant"},"Search Assistant")," Service.\nMinIO acts as the efficient object storage, where we only persist files imported via ",(0,i.kt)("a",{parentName:"p",href:"web-client"},"Web client")," UI from\nthe user's device."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Data Replication ")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Data replication across different external or internal components should be achieved through events messaging. Please note\nthat this can lead to eventual consistency due to the asynchronous nature of events broadcasting. MongoDB always acts as\nthe single source of truth!"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Management Services")),(0,i.kt)("p",null,"Management Services expose API for CRUD operations on the entities they are responsible for. Management Services are important\nparts of the system that represent the main concept of the data modeling in Diva.\nAll changes applied to the data produce Kafka events so other components can react properly to these changes. The entities'\ndata is stored in corresponding collections in MongoDB. "),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Title"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Dependencies"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/FraunhoferISST/diva/tree/master/core/services/resource-management"},"Resource Management")),(0,i.kt)("td",{parentName:"tr",align:null},"Responsible for managing the metadata about ",(0,i.kt)("a",{parentName:"td",href:"../../../about#resource"},"resources")),(0,i.kt)("td",{parentName:"tr",align:null},"Kafka, MongoDB, Schema Registry")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/FraunhoferISST/diva/tree/master/core/services/user-management"},"User Management")),(0,i.kt)("td",{parentName:"tr",align:null},"Responsible for ",(0,i.kt)("a",{parentName:"td",href:"../../../about#user"},"users")," data management and authentication"),(0,i.kt)("td",{parentName:"tr",align:null},"Kafka, MongoDB, Schema Registry")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/FraunhoferISST/diva/tree/master/core/services/asset-management"},"Asset Management")),(0,i.kt)("td",{parentName:"tr",align:null},"Responsible for managing the metadata about ",(0,i.kt)("a",{parentName:"td",href:"../../../about#asset"},"assets")),(0,i.kt)("td",{parentName:"tr",align:null},"Kafka, MongoDB, Schema Registry")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/FraunhoferISST/diva/tree/master/core/services/review-management"},"Review Management")),(0,i.kt)("td",{parentName:"tr",align:null},"Responsible for ",(0,i.kt)("a",{parentName:"td",href:"../../../about#review"},"reviews")," management"),(0,i.kt)("td",{parentName:"tr",align:null},"Kafka, MongoDB, Schema Registry")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Assistant Services")),(0,i.kt)("p",null,"Assistant Services provide useful functionalities to extend DIVA possibilities. They do not produce or mutate any data and have only\nread access to the entities."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Title"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Dependencies"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/FraunhoferISST/diva/tree/master/core/services/analytics-assistant"},"Analytics Assistant")),(0,i.kt)("td",{parentName:"tr",align:null},"provides statistical data about catalog entities"),(0,i.kt)("td",{parentName:"tr",align:null},"Elasticsearch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/FraunhoferISST/diva/tree/master/core/services/profiling-assistant"},"Profiling Assistant")),(0,i.kt)("td",{parentName:"tr",align:null},"Responsible for ",(0,i.kt)("a",{parentName:"td",href:"../../../about#resource"},"profiling workflows")," execution triggering"),(0,i.kt)("td",{parentName:"tr",align:null},"MongoDB, Airflow")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/FraunhoferISST/diva/tree/master/core/services/history-assistant"},"History Assistant")),(0,i.kt)("td",{parentName:"tr",align:null},"Provides a human readable representation of the entities ",(0,i.kt)("a",{parentName:"td",href:"../../../about#resource"},"history")),(0,i.kt)("td",{parentName:"tr",align:null},"MongoDB, Schema Registry")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/FraunhoferISST/diva/tree/master/core/services/search-assistant"},"Search Assistant")),(0,i.kt)("td",{parentName:"tr",align:null},"Provides preselected entities search API"),(0,i.kt)("td",{parentName:"tr",align:null},"Elasticsearch")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Adapter Services")),(0,i.kt)("p",null,"The Adapter Services are special services designed to connect and import data from external sources. They encapsulate\nthe connection logic, load the data, transform it into a DIVA compliant representation and store the newly created ",(0,i.kt)("a",{parentName:"p",href:"../../../about#resource"},"Resources")," in the system.\nIn special cases an Adapter Service can be implemented to export a DIVA Resource to an external system.\nThe creation of new resources is done by using the Resource Management Service, direct access to the data storage is only allowed in the read mode."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Title"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Dependencies"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/FraunhoferISST/diva/tree/master/core/services/adapter-services/diva-lake-adapter"},"DSC Adapter")),(0,i.kt)("td",{parentName:"tr",align:null},"Adapter for the ",(0,i.kt)("a",{parentName:"td",href:"https://github.com/International-Data-Spaces-Association/DataspaceConnector"},"Data Space Connector")),(0,i.kt)("td",{parentName:"tr",align:null},"Kafka, MongoDb, Resource Management, DSC Instance")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/FraunhoferISST/diva/tree/master/core/services/adapter-services/dsc-adapter"},"DIVA Lake Adapter")),(0,i.kt)("td",{parentName:"tr",align:null},"Responsible for uploading files into our Diva Lake (MinIO)"),(0,i.kt)("td",{parentName:"tr",align:null},"MinIO, Resource Management")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/FraunhoferISST/diva/tree/master/core/services/adapter-services/urban-pulse-adapter"},"UrbanPulse Adapter")),(0,i.kt)("td",{parentName:"tr",align:null},"Adapter for the UrbanPulse instance"),(0,i.kt)("td",{parentName:"tr",align:null},"UrbanPulse, Resource Management")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Workflow engine")),(0,i.kt)("p",null,"Apache Airflow is a great open-source workflow tool tha we use to execute and orchestrate profiling tasks.\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/FraunhoferISST/diva/tree/master/core/services/analytics-assistant"},"Profiling Assistant")," is our\nwrapper service for Airflow API that triggers the workflow execution."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"FaaS")),(0,i.kt)("p",null,"In DIVA, there are a number of useful analysis tasks that are performed frequently. We build small Functions-as-a-Service that\nsimply produce an output for a given input to address such specific profiling tasks. These functions are stateless and are a part\nof the profiling workflow engine."))}m.isMDXComponent=!0}}]);