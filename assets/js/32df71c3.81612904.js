"use strict";(self.webpackChunkdiva_docs=self.webpackChunkdiva_docs||[]).push([[4864],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),h=o,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||r;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9356:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],c={id:"gateway",title:"Gateway"},l="Gateway",s={unversionedId:"Development/Architecture/gateway",id:"Development/Architecture/gateway",title:"Gateway",description:"The Kong API Gateway acts as a secure access point to the backend services. It is an abstraction layer for the REST API's",source:"@site/docs/04-Development/04-Architecture/05-gateway.md",sourceDirName:"04-Development/04-Architecture",slug:"/Development/Architecture/gateway",permalink:"/docs/Development/Architecture/gateway",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"gateway",title:"Gateway"},sidebar:"divaSidebar",previous:{title:"Keycloak",permalink:"/docs/Development/Architecture/keycloak"},next:{title:"Web Client",permalink:"/docs/Development/Architecture/web-client"}},u={},p=[{value:"Authentication",id:"authentication",level:2},{value:"Configuration",id:"configuration",level:2}],d={toc:p};function h(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"gateway"},"Gateway"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://konghq.com/kong/"},"Kong")," API Gateway acts as a secure access point to the backend services. It is an abstraction layer for the ",(0,r.kt)("a",{parentName:"p",href:"rest-api"},"REST API's"),"\nof the individual services used by our ",(0,r.kt)("a",{parentName:"p",href:"web-client"},"Web client"),". Gateway provides an authentication mechanism and accepts\nrequests only from the clients with a valid ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io/"},"JWT"),". So the gateway is the only security layer in the\nentire system and should be the only component accessible on the Internet. The backend of the system should always run\nbehind the gateway, since the services themselves do not implement any authentication."),(0,r.kt)("h2",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"To reach the API behind the gateway, clients must include the Authorization Bearer header in the request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Authorization: Bearer <JWT>\n")),(0,r.kt)("p",null,"As of DIVA v2.2 we use Keycloak as identity provider and user authorization service.\nThe client sends the JWT tokens created by Keycloak in each request and Kong in the header. Kong uses the token to authenticate the\nuser by checking the token signature with the Keycloak public key."),(0,r.kt)("p",null,"When Kong processes requests, we use a plugin to extract user information from the token in authorization header and set it\nas additional headers. For example, the user ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is extracted from the JWT and set as ",(0,r.kt)("inlineCode",{parentName:"p"},"x-actorid"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"x-actorid")," header\nis required by most services through the OpenAPI specification."),(0,r.kt)("p",null,"This is the default flow for authorization and authentication by Keycloak and Kong, but it can be flexibly adjusted.\nIf a different algorithm is used in Keycloak for token creation, Kong configuration must be adjusted accordingly so\nthat Kong can correctly authenticate a user."),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"The Kong Gateway upstream service are configured through the declarative ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/FraunhoferISST/diva/blob/master/core/kong-gateway/kong.yml"},(0,r.kt)("inlineCode",{parentName:"a"},"kong.yml")),".\nHere you can regulate access to the service and enable or disable authentication for some routes or methods.\nTo understand the configuration, we recommend reading the documentation on Kong."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"kong.yml")," contains configuration that is in no way suitable for production environment and is only useful for\nlocal development. As a baseline we\nprovide an example production configuration in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/FraunhoferISST/diva/blob/master/core/kong-gateway/kong.production.yml"},(0,r.kt)("inlineCode",{parentName:"a"},"kong.production.yml")),",\nwhich must always be kept up to date with the development configuration."),(0,r.kt)("p",null,"When deploying with Docker, you can easily switch between configurations with the ",(0,r.kt)("inlineCode",{parentName:"p"},"KONG_DECLARATIVE_CONFIG")," environment variable.\nPlease read more in our ",(0,r.kt)("a",{parentName:"p",href:"../../deployment/docker#environment-variables"},"Docker guide")," about environment variables. For example,\nyou can place your configuration in ",(0,r.kt)("inlineCode",{parentName:"p"},"core/kong-gateway/my-production-config.yml")," and set the ENV in your ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dotenv"},"KONG_DECLARATIVE_CONFIG=my-production-config.yml\n")),(0,r.kt)("p",null,"The next important point is that Kong needs to know the Keycloak token issuer for authentication. The field ",(0,r.kt)("inlineCode",{parentName:"p"},"iss")," in\nKeycloak generated token depends on how ",(0,r.kt)("a",{parentName:"p",href:"keycloak"},"Keycloak is configured")," and on which URL it lives. Fo example, if the\nKeycloak instance is located on ",(0,r.kt)("inlineCode",{parentName:"p"},"https://my.kc.domain.com"),", you have to adjust the following everywhere authentication is required:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'plugins:\n  - name: jwt-keycloak\n    config:\n      allowed_iss: [ "https://my.kc.domain.com/auth/realms/<realm-name>" ]\n')),(0,r.kt)("p",null,"And again, ",(0,r.kt)("inlineCode",{parentName:"p"},"realm-name")," can very depending on how your Keycloak is configured to be used in DIVA. In the default configuration\nshipped with DIVA the realm name is ",(0,r.kt)("inlineCode",{parentName:"p"},"diva-kc-realm"),". In general the ",(0,r.kt)("inlineCode",{parentName:"p"},"iss")," URL origin part should correspond to with\n",(0,r.kt)("inlineCode",{parentName:"p"},"KEYCLOAK_FRONTEND_URL")," ENV specified URL origin.\nThe resulting URL is used from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gbbirkisson/kong-plugin-jwt-keycloak"},(0,r.kt)("inlineCode",{parentName:"a"},"kong-plugin-jwt-keycloak")),"\nto fetch the Keycloak public key and authenticate the user. It is important to note, that if you change the JWT token creation\nin Keycloak (e.g. signature algorithm), the provided token authentication may fail and you have to adjust\nthe declarative configuration correspondingly."))}h.isMDXComponent=!0}}]);