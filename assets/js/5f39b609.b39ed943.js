"use strict";(self.webpackChunkdiva_docs=self.webpackChunkdiva_docs||[]).push([[5228],{3905:function(e,a,t){t.d(a,{Zo:function(){return m},kt:function(){return u}});var n=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),c=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},m=function(e){var a=c(e.components);return n.createElement(s.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=c(t),u=o,h=d["".concat(s,".").concat(u)]||d[u]||p[u]||i;return t?n.createElement(h,r(r({ref:a},m),{},{components:t})):n.createElement(h,r({ref:a},m))}));function u(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=d;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=t[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6431:function(e,a,t){t.r(a),t.d(a,{assets:function(){return m},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var n=t(7462),o=t(3366),i=(t(7294),t(3905)),r=["components"],l={id:"docker-development",title:"Docker Development"},s=void 0,c={unversionedId:"Development/docker-development",id:"Development/docker-development",title:"Docker Development",description:"DIVA is built with a focus on scalability, modularization and expandability using a microservice architecture.",source:"@site/docs/04-Development/03-docker-development.md",sourceDirName:"04-Development",slug:"/Development/docker-development",permalink:"/diva-docs/docs/next/Development/docker-development",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"docker-development",title:"Docker Development"},sidebar:"divaSidebar",previous:{title:"Local Development",permalink:"/diva-docs/docs/next/Development/local-development"},next:{title:"Overview",permalink:"/diva-docs/docs/next/Development/Architecture/introduction"}},m={},p=[{value:"Environment variables",id:"environment-variables",level:2},{value:"Container and Image Management",id:"container-and-image-management",level:2},{value:"Manage Microservices",id:"manage-microservices",level:3},{value:"Pull Image",id:"pull-image",level:4},{value:"Build Image",id:"build-image",level:4},{value:"Push Image",id:"push-image",level:4},{value:"Manage Functions as a Service (FaaS)",id:"manage-functions-as-a-service-faas",level:3},{value:"Pull Image",id:"pull-image-1",level:4},{value:"Build Image",id:"build-image-1",level:4},{value:"Push Image",id:"push-image-1",level:4},{value:"Manage Airflow",id:"manage-airflow",level:3},{value:"Pull Image",id:"pull-image-2",level:4},{value:"Build Image",id:"build-image-2",level:4},{value:"Push Image",id:"push-image-2",level:4},{value:"Manage Base Images",id:"manage-base-images",level:3},{value:"Pull Image",id:"pull-image-3",level:4},{value:"Build Image",id:"build-image-3",level:4},{value:"Push Image",id:"push-image-3",level:4}],d={toc:p};function u(e){var a=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"DIVA is built with a focus on scalability, modularization and expandability using a microservice architecture.\nOur team relies on the latest technologies for container-based development and deployment of the system using Docker.\nAll system components are containerized and have current images that are continuously built in the CI pipeline.\nIn this guide we will learn how to get DIVA running with ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose"),"."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Make sure to read the ",(0,i.kt)("a",{parentName:"p",href:"prerequisites"},"prerequisites")," to know what you need to get started with Docker and Docker Compose.\nAlso note that deployment with docker is not suitable for Production.\nNonetheless, it is convenient for local development environment to quickly spin up most of the components like Kafka, Gateway and other services."))),(0,i.kt)("p",null,"All things related to docker are located in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/FraunhoferISST/diva/blob/master/docker"},(0,i.kt)("inlineCode",{parentName:"a"},"docker/")),"\ndirectory. Here we have prepared a script which you can use to directly boot all components, with default environment setup.\nIf you need a quick start, just execute the following commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# navigate to docker/ directory\ncd docker\n# spin up the system\n./up_core.sh\n")),(0,i.kt)("p",null,"The script starts all core services, profiling workflow engine, DSC and the web client application.\nIt may take some time until all components are up and running.\nBy default, the client should be available on ",(0,i.kt)("inlineCode",{parentName:"p"},"localhost"),"."),(0,i.kt)("p",null,"If you want to learn more about the configuration options, the following chapters will show you how to manage Docker containers, images and deployment."),(0,i.kt)("h2",{id:"environment-variables"},"Environment variables"),(0,i.kt)("p",null,"First with the environment variables you have the possibility to propagate settings to the containers on run time.\nThe ENV's are used to configure exposed ports, Kafka topics, database connections, credentials etc.\nThis makes the deployment of containers more flexible and provides you a way to configure the environment without potential collisions with other software on your machines."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Ports allocation")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"DIVA components allocate many default ports like 80, 3000 or 27017.\nTo avoid potential conflicts on deployment, most of the allocated ports can be configured in ",(0,i.kt)("inlineCode",{parentName:"p"},"docker/.env")," file."))),(0,i.kt)("p",null,"All available configuration possibilities are listed in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/FraunhoferISST/diva/blob/master/docker/.env.default"},(0,i.kt)("inlineCode",{parentName:"a"},"docker/.env.default"))," file.\nThis ENV template is used by default to boot the system with ",(0,i.kt)("inlineCode",{parentName:"p"},"up_core.sh")," script.\nTo override default settings, create a ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"docker/")," directory and copy the contents of ",(0,i.kt)("inlineCode",{parentName:"p"},".env.default")," to it.\nThere you can adjust the deployment, and e.g. change the port of the web application as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-env"},"WEB_CLIENT_PORT=90\n")),(0,i.kt)("h2",{id:"container-and-image-management"},"Container and Image Management"),(0,i.kt)("p",null,"Now we will briefly go through the lifecycle of containers and images, from configuration to deployment in the container registry.\nThis chapter is interesting for those who want to actively participate in the development of the system or manage containers and images in a more granular way."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Environment variables")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Make sure to create ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file on your machine like described in ",(0,i.kt)("a",{parentName:"p",href:"#environment-variables"},"Environment variables")))),(0,i.kt)("p",null,"We will take a brief look at how to build, push, and pull images in general.\nOf course, this chapter only concerns the software we have created and containerized, external images like Kafka or Elasticsearch are not of interest to us.\nIn general, you will find multiple Docker Compose files that have the following responsibilities:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/FraunhoferISST/diva/blob/master/docker/docker-compose.yml"},(0,i.kt)("inlineCode",{parentName:"a"},"docker-compose.yml"))," - the most\ninteresting config file as it is a heart of the DIVA")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/FraunhoferISST/diva/blob/master/docker/docker-compose.faas.yml"},(0,i.kt)("inlineCode",{parentName:"a"},"docker-compose.faas.yml"))," - FaaS services configuration useful only\nfor local development to build and test images\n")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/FraunhoferISST/diva/blob/master/docker/docker-compose.airflow.yml"},(0,i.kt)("inlineCode",{parentName:"a"},"docker-compose.airflow.yml"))," - Airflow configuration")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/FraunhoferISST/diva/blob/master/docker/docker-compose.profiling.yml"},(0,i.kt)("inlineCode",{parentName:"a"},"docker-compose.profiling.yml"))," - external profiling services\nused in our profiling workflows")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/FraunhoferISST/diva/blob/master/docker/docker-compose.monitoring.yml"},(0,i.kt)("inlineCode",{parentName:"a"},"docker-compose.monitoring.yml"))," - several helpful monitoring\nand debugging tools like Kibana that are not deployed within the system core"))),(0,i.kt)("p",null,"The folder also contains other Docker Compose configurations that have ",(0,i.kt)("inlineCode",{parentName:"p"},".build")," in the suffix.\nThese can override the normal configurations to build an image locally explicitly from source.\nThe difference with the ",(0,i.kt)("inlineCode",{parentName:"p"},".build")," configurations is that the services are executed in the context of the corresponding folder.\nGenerally, the configuration can be overwritten as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose -f docker-compose.build.yml build resource-management\n")),(0,i.kt)("h3",{id:"manage-microservices"},"Manage Microservices"),(0,i.kt)("p",null,"All microservices and their dependencies are defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),". You will work with this file the most."),(0,i.kt)("h4",{id:"pull-image"},"Pull Image"),(0,i.kt)("p",null,"Simply run the command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose pull <service_name>\n# for example\ndocker-compose pull entity-management\n")),(0,i.kt)("h4",{id:"build-image"},"Build Image"),(0,i.kt)("p",null,"To explicitly build the image from source, specify the path to the override ",(0,i.kt)("inlineCode",{parentName:"p"},".yml")," :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose f docker-compose.yml -f docker-compose.override.yml build <service_name>\n# for example\ndocker-compose f docker-compose.yml -f docker-compose.override.yml build entity-management\n")),(0,i.kt)("h4",{id:"push-image"},"Push Image"),(0,i.kt)("p",null,"Push image to container registry:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose push <service_name>\n# for example\ndocker-compose push entity-management\n")),(0,i.kt)("h3",{id:"manage-functions-as-a-service-faas"},"Manage Functions as a Service (FaaS)"),(0,i.kt)("p",null,"All FaaS are defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.faas.yml"),"."),(0,i.kt)("h4",{id:"pull-image-1"},"Pull Image"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose -f docker-compose.faas.yml pull <service_name>\n# for example\ndocker-compose -f docker-compose.faas.yml pull text-keywords-extractor\n")),(0,i.kt)("h4",{id:"build-image-1"},"Build Image"),(0,i.kt)("p",null,"To explicitly build the image from source, specify the path to the build ",(0,i.kt)("inlineCode",{parentName:"p"},".yml")," :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose -f docker-compose.faas.yml -f docker-compose.faas.build.yml build <service_name>\n# for example\ndocker-compose -f docker-compose.faas.yml -f docker-compose.faas.build.yml build text-keywords-extractor\n")),(0,i.kt)("h4",{id:"push-image-1"},"Push Image"),(0,i.kt)("p",null,"Push image to container registry:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose -f docker-compose.faas.yml push text-keywords-extractor\n# for example\ndocker-compose -f docker-compose.faas.yml push text-keywords-extractor\n")),(0,i.kt)("h3",{id:"manage-airflow"},"Manage Airflow"),(0,i.kt)("p",null,"We use a slightly customized image for Airflow. The definitions for Airflow\nare specified in",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.airflow.yml"),"."),(0,i.kt)("h4",{id:"pull-image-2"},"Pull Image"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker pull ghcr.io/fraunhoferisst/diva/airflow:<version>\n")),(0,i.kt)("h4",{id:"build-image-2"},"Build Image"),(0,i.kt)("p",null,"To explicitly build the image from source, specify the path to the build ",(0,i.kt)("inlineCode",{parentName:"p"},".yml")," :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose -f docker-compose.airflow.build.yml build airflow\n")),(0,i.kt)("h4",{id:"push-image-2"},"Push Image"),(0,i.kt)("p",null,"Push image to container registry:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose -f docker-compose.airflow.yml push airflow\n")),(0,i.kt)("h3",{id:"manage-base-images"},"Manage Base Images"),(0,i.kt)("p",null,"We have several images that serve as the basis for our FaaS.\nThey are located in ",(0,i.kt)("inlineCode",{parentName:"p"},"./base-images"),", so first change the working directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"cd base-images\n")),(0,i.kt)("h4",{id:"pull-image-3"},"Pull Image"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose pull <service_name>\n# for example\ndocker-compose pull base-python3\n")),(0,i.kt)("h4",{id:"build-image-3"},"Build Image"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose build <service_name>\n# for example\ndocker-compose build base-python3\n")),(0,i.kt)("h4",{id:"push-image-3"},"Push Image"),(0,i.kt)("p",null,"Push image to container registry:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose push <service_name>\n# for example\ndocker-compose push base-python3\n")))}u.isMDXComponent=!0}}]);