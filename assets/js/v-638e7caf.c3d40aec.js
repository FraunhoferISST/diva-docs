(self.webpackChunkdiva_docs=self.webpackChunkdiva_docs||[]).push([[693],{4646:(e,t,o)=>{"use strict";o.r(t),o.d(t,{data:()=>n});const n={key:"v-638e7caf",path:"/development/contribution/commits.html",title:"Committing changes",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"development/contribution/commits.md",git:{contributors:[]}}},6608:(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>u});var n=o(6252);const a=(0,n.Wm)("h1",{id:"committing-changes"},[(0,n.Wm)("a",{class:"header-anchor",href:"#committing-changes"},"#"),(0,n.Uk)(" Committing changes")],-1),c=(0,n.Uk)("We encourage all contributors to stick to the commit convention following the specification on "),s={href:"https://www.conventionalcommits.org/en/v1.0.0/",target:"_blank",rel:"noopener noreferrer"},i=(0,n.Uk)("Conventional Commits"),r=(0,n.Uk)(". With this restriction, we want to create a consistent and trackable history of changes across all system components. Furthermore, rule-compliant commits are important for the automatic generation of the "),d=(0,n.Wm)("a",{href:""},"CHANGELOG.md",-1),l=(0,n.Uk)(" according to the specification from "),p={href:"https://keepachangelog.com/en/1.0.0/",target:"_blank",rel:"noopener noreferrer"},m=(0,n.Uk)("keepachangelog.com"),h=(0,n.Uk)("."),g=(0,n.uE)('<p>In general, write the commits in imperative present tens. The commit message should be structured as follows:</p><div class="language-text ext-text"><pre class="language-text"><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre></div><p>We are using the following types: <code>feat</code>, <code>feat</code>, <code>chore</code>, <code>test</code>, <code>docs</code>, <code>feat</code>, <code>refactor</code>, <code>ci</code>, <code>release</code>. The list ist not comprehensive and can be extended on demand.</p><p>Append <code>!</code> for breaking changes to a type.</p><div class="custom-container tip"><p class="custom-container-title">Scopes are useful</p><p>The scope in the commit message help a lot to understand which parts of the system a commit affects. Always try to specify the scope in your messages. When working on services, you can use the <a href="">abbreviation</a> of the service name as the scope. If the change can be assigned to an issue, you can derive the scopes from the labels of the corresponding issues.</p></div><p>To give you an orientation consider some examples of good commits.</p><div class="language-text ext-text"><pre class="language-text"><code>feat!(UM): change the response for GET operation\n\nThis commit introduces changes to the response format \nof the User Management GET operation to adher to new OpenAPI specification \n</code></pre></div><div class="language-text ext-text"><pre class="language-text"><code>release(client): v20.0.0\n</code></pre></div><div class="language-text ext-text"><pre class="language-text"><code>ci: update actions\n</code></pre></div>',9),u={render:function(e,t){const o=(0,n.up)("OutboundLink");return(0,n.wg)(),(0,n.j4)(n.HY,null,[a,(0,n.Wm)("p",null,[c,(0,n.Wm)("a",s,[i,(0,n.Wm)(o)]),r,d,l,(0,n.Wm)("a",p,[m,(0,n.Wm)(o)]),h]),g],64)}}}}]);